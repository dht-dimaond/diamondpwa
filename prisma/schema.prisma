generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  clerkId           String     @unique
  firstName         String
  lastName          String
  userName          String     @unique
  avatar            String?
  email             String
  isAmbassador      Boolean    @default(false)
  isAdmin           Boolean    @default(false)
  telegramId        String?    @unique
  telegramUsername  String?
  balance           Int        @default(0)
  hashrate          Int        @default(10)
  miningStartTime   DateTime?  
  isMining          Boolean    @default(false)
  lastClaimTime     DateTime?  
  isMigrated        Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  referralCode      String?    @unique
  referredBy        String?    
  referrer          User?      @relation("Referrals", fields: [referredBy], references: [id], onDelete: SetNull)
  referrals         User[]     @relation("Referrals")
  streak            UserStreak?
  transactions      Transaction[]
  lastSpinDate      DateTime?  
  spins             UserSpin[]
  miningSessions    MiningSession[]
  // New field for wallet analytics
  totalSpent        Int        @default(0)
  
  @@map("users")
}

model UserSpin {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spinDate  DateTime @default(now())
  reward    Int      
  createdAt DateTime @default(now())

  @@map("user_spins")  
}

model UserStreak {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak       Int      @default(0)
  highestStreak       Int      @default(0)
  startDate           DateTime?
  lastLogin           DateTime?
  achievedMilestones  Int[]    @default([])
  tokens              Int      @default(0)

  @@map("user_streaks") 
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  packageId   Int?
  type        TransactionType // No default value
  hashRate    Float
  priceTON    Float
  amount      Float
  date        DateTime        @default(now())
  boc         String
  validity    String
  item        Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

enum TransactionType {
  PURCHASE
  REFERRAL_BONUS
  SPIN_REWARD
  WITHDRAW
  SWAP
  MINING_CLAIM
}


model MiningSession {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime       DateTime // When mining session started
  endTime         DateTime // When mining session ended (24 hours later)
  hashRate        Float    // Hashrate used during this session
  tokensEarned    Float    // Actual tokens earned and claimed
  sessionDuration Int      @default(86400) // Duration in seconds (24 hours = 86400)
  claimedAt       DateTime // When tokens were claimed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("mining_sessions")
}

model Price {
  id        String   @id @default(cuid())
  price     Float
  change    Float
  updatedAt DateTime @updatedAt
}

model support_complaints {
  id          Int       @id @default(autoincrement())
  user_id     String
  name        String    @db.VarChar(255)
  email       String    @db.VarChar(255)
  subject     String    @db.VarChar(255)
  category    String    @db.VarChar(50)
  priority    String    @default("Medium") @db.VarChar(20)
  description String
  attachment  String?   @db.VarChar(500)
  status      String    @default("Open") @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}